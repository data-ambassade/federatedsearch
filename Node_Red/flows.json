[
    {
        "id": "bd803264bdc6f8b2",
        "type": "tab",
        "label": "Federated search",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ddea5c78d72863b4",
        "type": "Service Host",
        "apiBase": "https://api.openai.com/v1",
        "secureApiKeyHeaderOrQueryName": "Authorization",
        "organizationId": "",
        "name": ""
    },
    {
        "id": "1d1dada2ec4b7d92",
        "type": "swagger-doc",
        "summary": "Generic API for federated search",
        "description": "Federated search is executed on endpoints that do have federation functionality like Virtuoso and OpenCatalogi",
        "tags": "federation",
        "consumes": "",
        "produces": "json,jsonld,ttl",
        "parameters": [
            {
                "name": "query",
                "in": "query",
                "description": "query",
                "required": false,
                "type": "string"
            },
            {
                "name": "federation",
                "in": "query",
                "description": "Describes the source for the federation query",
                "required": false,
                "type": "string"
            },
            {
                "name": "format",
                "in": "query",
                "description": "format of the ouput (json-ld, turtle,json), default=json.",
                "required": false,
                "type": "string"
            },
            {
                "name": "model",
                "in": "query",
                "description": "The model of the output results. eg DCAT",
                "required": false
            },
            {
                "name": "suggest",
                "in": "query",
                "required": false
            }
        ],
        "responses": {
            "200": {
                "description": "",
                "code": "200"
            }
        },
        "deprecated": false
    },
    {
        "id": "14e850785b3753e5",
        "type": "http in",
        "z": "bd803264bdc6f8b2",
        "name": "/generic_federated_search",
        "url": "/generic_federated_search",
        "method": "get",
        "upload": false,
        "swaggerDoc": "1d1dada2ec4b7d92",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "c4c73e7b1fe2c7c8",
                "4ce18126b20c10b5"
            ]
        ]
    },
    {
        "id": "c418a1c79da36103",
        "type": "function",
        "z": "bd803264bdc6f8b2",
        "name": "pre-process",
        "func": "// map incoming fields to application specific fields\n// and/or add logic\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 500,
        "wires": [
            [
                "abb18a42d3f08c09"
            ]
        ]
    },
    {
        "id": "ad9cd7255778f89d",
        "type": "http request",
        "z": "bd803264bdc6f8b2",
        "name": "OpenCatalogi",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "body",
        "url": "https://rotterdam.accept.commonground.nu/apps/opencatalogi/api/federation/publications?_search={{payload.keyword}}&_page={{payload.page}}&@self[register]={{payload.category}}&_limit=20&_facetable=true&_aggregate=true&_extend%5B%5D=%40self.schema&_facets[@self][register][type]=terms&_facets[@self][schema][type]=terms&_facets[@self][created][type]=terms&_facets[@self][updated][type]=terms&_facets[@self][published][type]=terms&_facets[@self][directory][type]=terms&_facets[@self][catalogs][type]=terms",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1000,
        "y": 420,
        "wires": [
            [
                "71f5b49b15ef6e57"
            ]
        ]
    },
    {
        "id": "c0bb5d36db7710af",
        "type": "http response",
        "z": "bd803264bdc6f8b2",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1670,
        "y": 380,
        "wires": []
    },
    {
        "id": "437a76010629f313",
        "type": "function",
        "z": "bd803264bdc6f8b2",
        "name": "pre-process",
        "func": "// map incoming fields to application specific fields\n// and/or add logic\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 420,
        "wires": [
            [
                "ad9cd7255778f89d"
            ]
        ]
    },
    {
        "id": "eaf9e9995735104b",
        "type": "switch",
        "z": "bd803264bdc6f8b2",
        "name": "Federate endpoint switch",
        "property": "payload.federation",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "opencatalogi",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "triply",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "test",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "oup_ogc_records",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "oup_graphql",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 550,
        "y": 400,
        "wires": [
            [
                "437a76010629f313",
                "baa4dbab390b0dbd"
            ],
            [
                "c418a1c79da36103"
            ],
            [
                "3bc52ad95ff9db92",
                "baa4dbab390b0dbd"
            ],
            [
                "a8327f187ed48793"
            ],
            [
                "74c738bfe750d30b"
            ],
            [
                "437a76010629f313",
                "baa4dbab390b0dbd"
            ]
        ]
    },
    {
        "id": "d0ab57500e93fb14",
        "type": "comment",
        "z": "bd803264bdc6f8b2",
        "name": "OpenCatalogi",
        "info": "OpenCatalogi",
        "x": 810,
        "y": 380,
        "wires": []
    },
    {
        "id": "88e3946516bda94c",
        "type": "comment",
        "z": "bd803264bdc6f8b2",
        "name": "Triply",
        "info": "Triply",
        "x": 790,
        "y": 460,
        "wires": []
    },
    {
        "id": "abb18a42d3f08c09",
        "type": "http request",
        "z": "bd803264bdc6f8b2",
        "name": "Linked Data (Triply)",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.demo.triplydb.com/queries/rotterdam-distributie-geodata/zoeken-over-meerdere-bronnen/6/run?query={{payload.query}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1010,
        "y": 500,
        "wires": [
            [
                "800e8f3368b82509"
            ]
        ]
    },
    {
        "id": "800e8f3368b82509",
        "type": "function",
        "z": "bd803264bdc6f8b2",
        "name": "post-process",
        "func": "//map application specific results to generic json response\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 500,
        "wires": [
            [
                "c0bb5d36db7710af"
            ]
        ]
    },
    {
        "id": "3f610a9d8dba9660",
        "type": "comment",
        "z": "bd803264bdc6f8b2",
        "name": "Test with a sample response",
        "info": "Test",
        "x": 860,
        "y": 240,
        "wires": []
    },
    {
        "id": "71f5b49b15ef6e57",
        "type": "function",
        "z": "bd803264bdc6f8b2",
        "name": "post-process",
        "func": "const input = msg.payload;\nconst results = input.results || [];\n\nlet transformedResults = results.map(item => {\n    let transformed = {};\n\n    // 1. Copy all top-level fields except \"@self\"\n    for (let key in item) {\n        if (key !== '@self') {\n            transformed[key] = item[key];\n        }\n    }\n\n    const self = item['@self'];\n\n    // 2. Schema object with title + uri\n    if (self?.schema?.title && self?.uri) {\n        transformed[\"schema\"] = {\n            title: self.schema.title,\n            url: self.uri\n        };\n    }\n\n    // 3. Files: convert to array of objects { title, accessUrl }\n    if (Array.isArray(self.files)) {\n        transformed[\"files\"] = self.files\n            .filter(file => file.title && file.accessUrl)\n            .map(file => ({\n                title: file.title,\n                accessUrl: file.accessUrl\n            }));\n    }\n\n    // 4. Metadata between files and catalogs\n    const metaFields = [\n        \"organisation\", \"groups\", \"authorization\", \"geo\", \"updated\",\n        \"created\", \"published\", \"depublished\", \"directory\"\n    ];\n\n    metaFields.forEach(field => {\n        if (self.hasOwnProperty(field)) {\n            transformed[field] = self[field];\n        }\n    });\n\n    // 5. Catalogs: list of titles as string\n    if (Array.isArray(self.catalogs)) {\n        transformed[\"catalogs\"] = self.catalogs.map(c => c.title).join(', ');\n    }\n\n    return transformed;\n});\n\n// 6. Final output object\nlet finalOutput = {\n    items: transformedResults,\n    total: input.total,\n    limit: input.limit,\n    offset: input.offset,\n    page: input.page,\n    pages: input.pages,\n    facets: input.facets || [],\n    facetable: input.facetable || {}\n};\n\nmsg.payload = finalOutput;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 420,
        "wires": [
            [
                "41fbcf50fe1c0cd9",
                "c0bb5d36db7710af"
            ]
        ]
    },
    {
        "id": "41fbcf50fe1c0cd9",
        "type": "debug",
        "z": "bd803264bdc6f8b2",
        "name": "debug 91",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 380,
        "wires": []
    },
    {
        "id": "baa4dbab390b0dbd",
        "type": "debug",
        "z": "bd803264bdc6f8b2",
        "name": "debug 92",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 480,
        "wires": []
    },
    {
        "id": "a8327f187ed48793",
        "type": "function",
        "z": "bd803264bdc6f8b2",
        "name": "pre-process",
        "func": "// map incoming fields to application specific fields\n// and/or add logic\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 600,
        "wires": [
            [
                "b1c7e162020e421e"
            ]
        ]
    },
    {
        "id": "d4cb4aa3a40ff5fa",
        "type": "comment",
        "z": "bd803264bdc6f8b2",
        "name": "OGC Records OUP",
        "info": "Test",
        "x": 830,
        "y": 560,
        "wires": []
    },
    {
        "id": "b1c7e162020e421e",
        "type": "http request",
        "z": "bd803264bdc6f8b2",
        "name": "Open Urban Platform",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "body",
        "url": "https://ogc-demo.clearly.app/collections",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1020,
        "y": 600,
        "wires": [
            [
                "15000d9f3b3c253c"
            ]
        ]
    },
    {
        "id": "15000d9f3b3c253c",
        "type": "function",
        "z": "bd803264bdc6f8b2",
        "name": "post-process",
        "func": "//map application specific results to generic json response\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 600,
        "wires": [
            [
                "c0bb5d36db7710af"
            ]
        ]
    },
    {
        "id": "74c738bfe750d30b",
        "type": "function",
        "z": "bd803264bdc6f8b2",
        "name": "pre-process",
        "func": "// map incoming fields to application specific fields\n// and/or add logic\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 700,
        "wires": [
            [
                "ccca65b6e19f3b61"
            ]
        ]
    },
    {
        "id": "f00a75dacadba37a",
        "type": "comment",
        "z": "bd803264bdc6f8b2",
        "name": "OGC GraphQL",
        "info": "Test",
        "x": 820,
        "y": 660,
        "wires": []
    },
    {
        "id": "ccca65b6e19f3b61",
        "type": "http request",
        "z": "bd803264bdc6f8b2",
        "name": "Open Urban Platform",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "body",
        "url": "https://ogc-demo.clearly.app/collections",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1020,
        "y": 700,
        "wires": [
            [
                "85dc505ba58cf4f8"
            ]
        ]
    },
    {
        "id": "85dc505ba58cf4f8",
        "type": "function",
        "z": "bd803264bdc6f8b2",
        "name": "post-process",
        "func": "//map application specific results to generic json response\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 700,
        "wires": [
            [
                "c0bb5d36db7710af"
            ]
        ]
    },
    {
        "id": "c0e6165abc99ca8e",
        "type": "function",
        "z": "bd803264bdc6f8b2",
        "name": "Sample file",
        "func": "// define test json response\n// \nmsg.payload= \n{\n    \"@context\": {\n        \"dcat\": \"http://www.w3.org/ns/dcat#\",\n        \"dct\": \"http://purl.org/dc/terms/\",\n        \"foaf\": \"http://xmlns.com/foaf/0.1/\",\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n        \"vcard\": \"http://www.w3.org/2006/vcard/ns#\",\n        \"adms\": \"http://www.w3.org/ns/adms#\",\n        \"geo\": \"http://www.opengis.net/ont/geosparql#\",\n        \"locn\": \"http://www.w3.org/ns/locn#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\"\n    },\n    \"@type\": \"dcat:Catalog\",\n    \"@id\": \"https://data.rotterdam.nl/catalog\",\n    \"dct:title\": {\n        \"@value\": \"Open Data Catalogus Gemeente Rotterdam\",\n        \"@language\": \"nl\"\n    },\n    \"dct:description\": {\n        \"@value\": \"Deze catalogus bevat datasets die door de gemeente Rotterdam beschikbaar zijn gesteld als open data.\",\n        \"@language\": \"nl\"\n    },\n    \"dct:publisher\": {\n        \"@type\": \"foaf:Organization\",\n        \"foaf:name\": \"Gemeente Rotterdam\",\n        \"@id\": \"https://standaarden.overheid.nl/owms/terms/Gemeente_Rotterdam\"\n    },\n    \"dct:language\": [\n        { \"@id\": \"http://publications.europa.eu/resource/authority/language/NLD\" }\n    ],\n    \"dcat:dataset\": [\n        {\n            \"@type\": \"dcat:Dataset\",\n            \"@id\": \"https://data.rotterdam.nl/dataset/bomenbestand\",\n            \"dct:title\": {\n                \"@value\": \"Bomenbestand Rotterdam\",\n                \"@language\": \"nl\"\n            },\n            \"dct:description\": {\n                \"@value\": \"Locatie en kenmerken van bomen in de openbare ruimte van Rotterdam.\",\n                \"@language\": \"nl\"\n            },\n            \"dct:identifier\": \"rotterdam-bomenbestand\",\n            \"dct:publisher\": {\n                \"@id\": \"https://standaarden.overheid.nl/owms/terms/Gemeente_Rotterdam\",\n                \"@type\": \"foaf:Organization\",\n                \"foaf:name\": \"Gemeente Rotterdam\"\n            },\n            \"dct:creator\": {\n                \"@type\": \"foaf:Agent\",\n                \"foaf:name\": \"Afdeling Stadsbeheer\"\n            },\n            \"dcat:contactPoint\": {\n                \"@type\": \"vcard:Kind\",\n                \"vcard:fn\": \"Data Loket Gemeente Rotterdam\",\n                \"vcard:hasEmail\": \"mailto:dataloket@rotterdam.nl\",\n                \"vcard:hasURL\": {\n                    \"@id\": \"https://data.rotterdam.nl/contact\"\n                }\n            },\n            \"dct:issued\": {\n                \"@type\": \"xsd:date\",\n                \"@value\": \"2023-03-01\"\n            },\n            \"dct:modified\": {\n                \"@type\": \"xsd:date\",\n                \"@value\": \"2024-06-15\"\n            },\n            \"dct:language\": [\n                { \"@id\": \"http://publications.europa.eu/resource/authority/language/NLD\" }\n            ],\n            \"dct:spatial\": {\n                \"@type\": \"dct:Location\",\n                \"rdfs:label\": \"Gemeente Rotterdam\",\n                \"locn:geometry\": {\n                    \"@type\": \"geo:Geometry\",\n                    \"geo:asWKT\": \"POLYGON((3.971 51.856, 4.599 51.856, 4.599 51.827, 3.971 51.827, 3.971 51.856))\"\n                }\n            },\n            \"dct:temporal\": {\n                \"@type\": \"dct:PeriodOfTime\",\n                \"dct:startDate\": {\n                    \"@type\": \"xsd:date\",\n                    \"@value\": \"2020-01-01\"\n                },\n                \"dct:endDate\": {\n                    \"@type\": \"xsd:date\",\n                    \"@value\": \"2024-12-31\"\n                }\n            },\n            \"dct:license\": {\n                \"@id\": \"http://creativecommons.org/publicdomain/zero/1.0/\"\n            },\n            \"dcat:keyword\": [\n                { \"@value\": \"bomen\", \"@language\": \"nl\" },\n                { \"@value\": \"groenvoorziening\", \"@language\": \"nl\" }\n            ],\n            \"dcat:theme\": [\n                {\n                    \"@id\": \"http://publications.europa.eu/resource/authority/data-theme/ENVI\",\n                    \"rdfs:label\": {\n                        \"@value\": \"Milieu\",\n                        \"@language\": \"nl\"\n                    }\n                },\n                {\n                    \"@id\": \"http://publications.europa.eu/resource/authority/data-theme/TRAN\",\n                    \"rdfs:label\": {\n                        \"@value\": \"Transport\",\n                        \"@language\": \"nl\"\n                    }\n                }\n            ],\n            \"dcat:distribution\": [\n                {\n                    \"@type\": \"dcat:Distribution\",\n                    \"@id\": \"https://data.rotterdam.nl/distribution/bomenbestand/csv\",\n                    \"dct:format\": {\n                        \"@id\": \"http://publications.europa.eu/resource/authority/file-type/CSV\"\n                    },\n                    \"dcat:accessURL\": {\n                        \"@id\": \"https://data.rotterdam.nl/downloads/bomenbestand.csv\"\n                    },\n                    \"dcat:mediaType\": \"text/csv\",\n                    \"dct:title\": {\n                        \"@value\": \"CSV download bomenbestand\",\n                        \"@language\": \"nl\"\n                    }\n                }\n            ]\n        }\n    ]\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 280,
        "wires": [
            [
                "45c74da220ea7a08"
            ]
        ]
    },
    {
        "id": "3bc52ad95ff9db92",
        "type": "function",
        "z": "bd803264bdc6f8b2",
        "name": "pre-process",
        "func": "// map incoming fields to application specific fields\n// and/or add logic\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 280,
        "wires": [
            [
                "c0e6165abc99ca8e"
            ]
        ]
    },
    {
        "id": "45c74da220ea7a08",
        "type": "function",
        "z": "bd803264bdc6f8b2",
        "name": "post-process",
        "func": "// Zet zoekterm in lower case voor case-insensitive vergelijking\nlet zoekterm = flow.get(\"query\") \n\n// Clone het originele object om niet alles handmatig te reconstrueren\n\nlet originelePayload = JSON.parse(JSON.stringify(msg.payload));\n\n// Filter de datasets op zoekterm in title of description\noriginelePayload[\"dcat:dataset\"] = originelePayload[\"dcat:dataset\"].filter(dataset => {\n    let title = dataset[\"dct:title\"]?.[\"@value\"]?.toLowerCase() || \"\";\n    let description = dataset[\"dct:description\"]?.[\"@value\"]?.toLowerCase() || \"\";\n    return title.includes(zoekterm) || description.includes(zoekterm);\n});\n\n// Zet het aangepaste object als nieuwe payload\nmsg.payload = originelePayload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 280,
        "wires": [
            [
                "c0bb5d36db7710af",
                "6125c41a262a9045"
            ]
        ]
    },
    {
        "id": "1ac610b1c82b795a",
        "type": "switch",
        "z": "bd803264bdc6f8b2",
        "name": "suggest?",
        "property": "payload.suggest",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 340,
        "y": 220,
        "wires": [
            [
                "cf3897dbccc9a18c"
            ],
            [
                "eaf9e9995735104b"
            ]
        ]
    },
    {
        "id": "cf3897dbccc9a18c",
        "type": "function",
        "z": "bd803264bdc6f8b2",
        "name": "prepare prompt",
        "func": "// prepare prompt for openai\n\nvar prompt = []\n\nprompt = \n{\n   \"model\" : \"gpt-3.5-turbo\",\n    \"max_tokens\"  :  1024 ,\n    \"messages\" :  \n        [\n            {\n                \"role\": \"user\",\n                \"content\": [\n                    {\n                        \"type\": \"text\",\n                        \"text\": \"Geef mij een genummerde lijst in de vorm van een json array (id, synoniem) met 3 synoniemen voor \" + msg.payload.query\n                    }\n                ]\n            }\n        ]\n}\n\ndelete msg.payload\n\nmsg.payload = prompt\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 100,
        "wires": [
            [
                "58f0728a26cbba1d",
                "a2db570e1365910c"
            ]
        ]
    },
    {
        "id": "58f0728a26cbba1d",
        "type": "OpenAI API",
        "z": "bd803264bdc6f8b2",
        "name": "chat completion",
        "property": "payload",
        "propertyType": "msg",
        "service": "ddea5c78d72863b4",
        "method": "createChatCompletion",
        "x": 1020,
        "y": 100,
        "wires": [
            [
                "a66877b37b150669",
                "ae45e857aa0ed8cf"
            ]
        ]
    },
    {
        "id": "a380d56172f0dd75",
        "type": "comment",
        "z": "bd803264bdc6f8b2",
        "name": "API Key",
        "info": "OPENAI_API_KEY="",
        "x": 1050,
        "y": 60,
        "wires": []
    },
    {
        "id": "a66877b37b150669",
        "type": "function",
        "z": "bd803264bdc6f8b2",
        "name": "post-process",
        "func": "\nvar obj =[]\n// Haal de content-string op\n\nobj = msg.payload.choices[0].message.content;\n\ndelete msg.payload\n\nmsg.payload = obj;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 100,
        "wires": [
            [
                "c0bb5d36db7710af"
            ]
        ]
    },
    {
        "id": "a2db570e1365910c",
        "type": "debug",
        "z": "bd803264bdc6f8b2",
        "name": "debug 96",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 160,
        "wires": []
    },
    {
        "id": "ae45e857aa0ed8cf",
        "type": "debug",
        "z": "bd803264bdc6f8b2",
        "name": "debug 97",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 160,
        "wires": []
    },
    {
        "id": "6125c41a262a9045",
        "type": "debug",
        "z": "bd803264bdc6f8b2",
        "name": "debug 98",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 220,
        "wires": []
    },
    {
        "id": "5207d6858c43b485",
        "type": "comment",
        "z": "bd803264bdc6f8b2",
        "name": "Get suggestions on a query",
        "info": "parameter suggest=true. parameter query contains the term to search for synonyms\n",
        "x": 860,
        "y": 60,
        "wires": []
    },
    {
        "id": "0de6d756a637257d",
        "type": "comment",
        "z": "bd803264bdc6f8b2",
        "name": "Suggest is true?",
        "info": "In case suggest=true than find suggestions on the query",
        "x": 360,
        "y": 160,
        "wires": []
    },
    {
        "id": "a7a3ec1fdc67c919",
        "type": "switch",
        "z": "bd803264bdc6f8b2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1540,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "c4c73e7b1fe2c7c8",
        "type": "change",
        "z": "bd803264bdc6f8b2",
        "name": "Save parameters",
        "rules": [
            {
                "t": "set",
                "p": "federation",
                "pt": "flow",
                "to": "payload.federation",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "query",
                "pt": "flow",
                "to": "payload.query",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "suggest",
                "pt": "flow",
                "to": "payload.suggest",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "source",
                "pt": "flow",
                "to": "payload.source",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "model",
                "pt": "flow",
                "to": "payload.model",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "format",
                "pt": "msg",
                "to": "payload.format",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 220,
        "wires": [
            [
                "1ac610b1c82b795a"
            ]
        ]
    },
    {
        "id": "bc1a1a37e1c769c4",
        "type": "comment",
        "z": "bd803264bdc6f8b2",
        "name": "Call the selected endpoint",
        "info": "In case suggest=true than find suggestions on the query",
        "x": 550,
        "y": 320,
        "wires": []
    },
    {
        "id": "4ce18126b20c10b5",
        "type": "debug",
        "z": "bd803264bdc6f8b2",
        "name": "debug 99",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 80,
        "wires": []
    }
]
