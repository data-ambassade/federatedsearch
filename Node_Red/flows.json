[{"id":"bd803264bdc6f8b2","type":"tab","label":"Federated search","disabled":false,"info":"","env":[]},{"id":"14e850785b3753e5","type":"http in","z":"bd803264bdc6f8b2","name":"/generic_federated_search","url":"/generic_federated_search","method":"get","upload":false,"swaggerDoc":"1d1dada2ec4b7d92","x":130,"y":360,"wires":[["eaf9e9995735104b"]]},{"id":"c418a1c79da36103","type":"function","z":"bd803264bdc6f8b2","name":"pre-process","func":"// map incoming fields to application specific fields\n// and/or add logic\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":650,"y":380,"wires":[["abb18a42d3f08c09"]]},{"id":"ad9cd7255778f89d","type":"http request","z":"bd803264bdc6f8b2","name":"OpenCatalogi","method":"GET","ret":"obj","paytoqs":"body","url":"https://rotterdam.accept.commonground.nu/apps/opencatalogi/api/federation/publications?_search={{payload.keyword}}&_page={{payload.page}}&@self[register]={{payload.category}}&_limit=20&_facetable=true&_aggregate=true&_extend%5B%5D=%40self.schema&_facets[@self][register][type]=terms&_facets[@self][schema][type]=terms&_facets[@self][created][type]=terms&_facets[@self][updated][type]=terms&_facets[@self][published][type]=terms&_facets[@self][directory][type]=terms&_facets[@self][catalogs][type]=terms","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":840,"y":300,"wires":[["71f5b49b15ef6e57"]]},{"id":"c0bb5d36db7710af","type":"http response","z":"bd803264bdc6f8b2","name":"","statusCode":"","headers":{},"x":1270,"y":380,"wires":[]},{"id":"437a76010629f313","type":"function","z":"bd803264bdc6f8b2","name":"pre-process","func":"// map incoming fields to application specific fields\n// and/or add logic\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":650,"y":300,"wires":[["ad9cd7255778f89d"]]},{"id":"c0e6165abc99ca8e","type":"function","z":"bd803264bdc6f8b2","name":"your own test json","func":"// define test json response\n//\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":670,"y":460,"wires":[["58f51ac55b557901"]]},{"id":"58f51ac55b557901","type":"json","z":"bd803264bdc6f8b2","name":"","property":"payload","action":"","pretty":false,"x":1010,"y":460,"wires":[["c0bb5d36db7710af"]]},{"id":"eaf9e9995735104b","type":"switch","z":"bd803264bdc6f8b2","name":"Federate endpoint","property":"payload.federation","propertyType":"msg","rules":[{"t":"eq","v":"opencatalogi","vt":"str"},{"t":"eq","v":"triply","vt":"str"},{"t":"eq","v":"test","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":4,"x":390,"y":360,"wires":[["437a76010629f313"],["c418a1c79da36103"],["c0e6165abc99ca8e"],["437a76010629f313","baa4dbab390b0dbd"]]},{"id":"d0ab57500e93fb14","type":"comment","z":"bd803264bdc6f8b2","name":"OpenCatalogi","info":"OpenCatalogi","x":650,"y":260,"wires":[]},{"id":"88e3946516bda94c","type":"comment","z":"bd803264bdc6f8b2","name":"Triply","info":"Triply","x":630,"y":340,"wires":[]},{"id":"abb18a42d3f08c09","type":"http request","z":"bd803264bdc6f8b2","name":"Triply","method":"GET","ret":"obj","paytoqs":"ignore","url":"https://api.demo.triplydb.com/queries/rotterdam-distributie-geodata/zoeken-over-meerdere-bronnen/6/run?query={{payload.query}}","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":810,"y":380,"wires":[["800e8f3368b82509"]]},{"id":"800e8f3368b82509","type":"function","z":"bd803264bdc6f8b2","name":"post-process","func":"//map application specific results to generic json response\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1030,"y":380,"wires":[["c0bb5d36db7710af"]]},{"id":"3f610a9d8dba9660","type":"comment","z":"bd803264bdc6f8b2","name":"Test","info":"Test","x":630,"y":420,"wires":[]},{"id":"71f5b49b15ef6e57","type":"function","z":"bd803264bdc6f8b2","name":"post-process","func":"const input = msg.payload;\nconst results = input.results || [];\n\nlet transformedResults = results.map(item => {\n    let transformed = {};\n\n    // 1. Copy all top-level fields except \"@self\"\n    for (let key in item) {\n        if (key !== '@self') {\n            transformed[key] = item[key];\n        }\n    }\n\n    const self = item['@self'];\n\n    // 2. Schema object with title + uri\n    if (self?.schema?.title && self?.uri) {\n        transformed[\"schema\"] = {\n            title: self.schema.title,\n            url: self.uri\n        };\n    }\n\n    // 3. Files: convert to array of objects { title, accessUrl }\n    if (Array.isArray(self.files)) {\n        transformed[\"files\"] = self.files\n            .filter(file => file.title && file.accessUrl)\n            .map(file => ({\n                title: file.title,\n                accessUrl: file.accessUrl\n            }));\n    }\n\n    // 4. Metadata between files and catalogs\n    const metaFields = [\n        \"organisation\", \"groups\", \"authorization\", \"geo\", \"updated\",\n        \"created\", \"published\", \"depublished\", \"directory\"\n    ];\n\n    metaFields.forEach(field => {\n        if (self.hasOwnProperty(field)) {\n            transformed[field] = self[field];\n        }\n    });\n\n    // 5. Catalogs: list of titles as string\n    if (Array.isArray(self.catalogs)) {\n        transformed[\"catalogs\"] = self.catalogs.map(c => c.title).join(', ');\n    }\n\n    return transformed;\n});\n\n// 6. Final output object\nlet finalOutput = {\n    items: transformedResults,\n    total: input.total,\n    limit: input.limit,\n    offset: input.offset,\n    page: input.page,\n    pages: input.pages,\n    facets: input.facets || [],\n    facetable: input.facetable || {}\n};\n\nmsg.payload = finalOutput;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1030,"y":300,"wires":[["41fbcf50fe1c0cd9","c0bb5d36db7710af"]]},{"id":"41fbcf50fe1c0cd9","type":"debug","z":"bd803264bdc6f8b2","name":"debug 91","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1240,"y":240,"wires":[]},{"id":"baa4dbab390b0dbd","type":"debug","z":"bd803264bdc6f8b2","name":"debug 92","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":640,"y":200,"wires":[]},{"id":"1d1dada2ec4b7d92","type":"swagger-doc","summary":"Generic API for federated search","description":"Federated search is executed on endpoints that do have federation functionality like Virtuoso and OpenCatalogi","tags":"federation","consumes":"","produces":"json,jsonld,ttl","parameters":[{"name":"query","in":"query","description":"query","required":false,"type":"string"},{"name":"federation","in":"query","description":"Describes the source for the federation query","required":false,"type":"string"},{"name":"format","in":"query","description":"format of the ouput (json-ld, turtle,json), default=json.","required":false,"type":"string"},{"name":"model","in":"query","description":"The model of the output results. eg DCAT","required":false}],"responses":{"200":{"description":""}},"deprecated":false}]